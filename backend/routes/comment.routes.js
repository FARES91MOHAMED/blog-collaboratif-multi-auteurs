// routes/comment.routes.js
const express = require('express');
const router = express.Router();
const commentCtrl = require('../controllers/comment.controller');
const auth = require('../middlewares/auth.middleware');
const role = require('../middlewares/role.middleware');

// Models (si tu en as besoin pour r√©cup√©rer auteur)
const Article = require('../models/Article');

// ‚ûï Ajouter un commentaire √† un article
router.post('/:articleId', auth, async (req, res) => {
  try {
    // 1Ô∏è‚É£ Cr√©er le commentaire via ton controller existant
    const newComment = await commentCtrl.create(req, res, true); 
    // on passe `true` pour que le controller retourne le commentaire sans envoyer la r√©ponse

    if (!newComment || !newComment.article) return; // d√©j√† trait√© par controller

    // 2Ô∏è‚É£ R√©cup√©rer les infos pour notification
    const article = await Article.findById(req.params.articleId).populate('author');
    if (!article || !article.author) return;

    const authorId = article.author._id;
    const commenterName = req.user.name || 'Un lecteur';
    const articleTitle = article.title;

    // 3Ô∏è‚É£ Socket.IO ‚Üí notifier l‚Äôauteur en direct s‚Äôil est connect√©
    const io = req.app.get('io');
    io.to(String(authorId)).emit('commentNotification', {
      title: 'Nouveau commentaire',
      message: `${commenterName} a comment√© ton article "${articleTitle}"`,
      articleId: article._id,
      commentId: newComment._id,
    });

    // 4Ô∏è‚É£ Web Push ‚Üí notifier m√™me s‚Äôil est d√©connect√©
    const sendAll = req.app.get('webpushSendAll');
    if (sendAll) {
      sendAll({
        title: 'Nouveau commentaire',
        message: `${commenterName} a comment√© ton article "${articleTitle}"`,
        articleId: article._id,
      });
    }

    // 5Ô∏è‚É£ R√©ponse finale (si le controller ne l‚Äôa pas d√©j√† envoy√©e)
    return res.status(201).json(newComment);

  } catch (err) {
    console.error('Erreur cr√©ation commentaire :', err);
    return res.status(500).json({ message: 'Erreur serveur' });
  }
});

// üìú Lister les commentaires d‚Äôun article
router.get('/:articleId', commentCtrl.listByArticle);

// ‚ùå Supprimer un commentaire (admin uniquement)
router.delete('/:id', auth, role(['admin']), commentCtrl.delete);

module.exports = router;
